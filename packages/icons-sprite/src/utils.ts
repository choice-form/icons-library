import * as path from "path";
import { fileURLToPath } from "url";
import fs from "fs-extra";

/**
 * 获取当前模块的目录路径
 */
export function getDirname(importMetaUrl: string): string {
  return path.dirname(fileURLToPath(importMetaUrl));
}

/**
 * 从文件路径生成 kebab-case 的 ID
 */
export function generateIconId(
  filename: string,
  filepath: string,
  prefix = "",
  suffix = ""
): string {
  // 移除文件扩展名
  const nameWithoutExt = path.basename(filename, path.extname(filename));

  // 转换为 kebab-case
  const kebabCase = nameWithoutExt
    .replace(/([a-z])([A-Z])/g, "$1-$2") // camelCase to kebab-case
    .replace(/[\s_]+/g, "-") // 空格和下划线转为连字符
    .toLowerCase()
    .replace(/[^a-z0-9-]/g, "") // 移除非字母数字和连字符的字符
    .replace(/-+/g, "-") // 合并多个连字符
    .replace(/^-|-$/g, ""); // 移除开头和结尾的连字符

  return `${prefix}${kebabCase}${suffix}`;
}

/**
 * 从 SVG 内容中提取 viewBox
 */
export function extractViewBox(svgContent: string): string {
  const viewBoxMatch = svgContent.match(/viewBox=["']([^"']+)["']/i);
  if (viewBoxMatch) {
    return viewBoxMatch[1];
  }

  // 尝试从 width 和 height 属性推断
  const widthMatch = svgContent.match(/width=["']?(\d+)["']?/i);
  const heightMatch = svgContent.match(/height=["']?(\d+)["']?/i);

  if (widthMatch && heightMatch) {
    return `0 0 ${widthMatch[1]} ${heightMatch[1]}`;
  }

  // 默认 viewBox
  return "0 0 24 24";
}

/**
 * 从 SVG 内容中提取内部内容（移除 <svg> 标签）
 */
export function extractSvgContent(svgContent: string): string {
  // 移除 SVG 标签，保留内部内容
  const match = svgContent.match(/<svg[^>]*>([\s\S]*?)<\/svg>/i);
  return match ? match[1].trim() : svgContent.trim();
}

/**
 * 验证文件是否为 SVG 文件
 */
export function isSvgFile(filepath: string): boolean {
  return path.extname(filepath).toLowerCase() === ".svg";
}

/**
 * 确保目录存在
 */
export function ensureDir(dirPath: string): void {
  fs.ensureDirSync(dirPath);
}

/**
 * 生成 TypeScript 类型定义
 */
export function generateTypeDefinitions(
  symbols: Array<{ id: string }>
): string {
  const iconNames = symbols.map((symbol) => `'${symbol.id}'`).join(" | ");
  const iconMap = symbols
    .map((symbol) => `  '${symbol.id}': string`)
    .join("\n");

  return `// Auto-generated by @choiceform/icons-sprite
// Do not edit this file manually

export type IconName = ${iconNames || "string"}

export interface IconMap {
${iconMap}
}

export const iconNames = ${JSON.stringify(
    symbols.map((s) => s.id),
    null,
    2
  )} as const
`;
}

/**
 * 美化日志输出
 */
export function formatBytes(bytes: number): string {
  if (bytes === 0) return "0 Bytes";

  const k = 1024;
  const sizes = ["Bytes", "KB", "MB", "GB"];
  const i = Math.floor(Math.log(bytes) / Math.log(k));

  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i];
}
